{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPgBjNrzdFGUtIUWkaVsjMe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/payal6269/first-project/blob/main/assignment1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q1.LIST OPERATIONS (i-xii)"
      ],
      "metadata": {
        "id": "5ELfGHHXBV9X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "L = [11,12,13,14]\n",
        "#(i)\n",
        "L.extend([50,60])\n",
        "print(\"After adding:\",L)\n",
        "\n",
        "#(ii)\n",
        "L.remove(11)\n",
        "L.remove(13)\n",
        "print(\"After removing 11,13\",L)\n",
        "\n",
        "#(iii)\n",
        "print(\"Sorted ascending:\",sorted(L))\n",
        "\n",
        "#(iv)\n",
        "print(\"Sorted descending,sorted\",sorted(L,reverse=True))\n",
        "\n",
        "#(v)\n",
        "print(\"is 13 in L\",13 in L)\n",
        "\n",
        "#(vi)\n",
        "print(\"Length of L:\",len(L))\n",
        "\n",
        "#(vii)\n",
        "print(\"Sum of L:\",sum(L))\n",
        "\n",
        "#(viii)\n",
        "print(\"Sum of odd numbers:\",sum(i for i in L if i % 2!=0 ))\n",
        "\n",
        "#(ix)\n",
        "print(\"Sum of even numbers:\",sum(i for i in L if i % 2 == 0))\n",
        "\n",
        "#(x)\n",
        "def is_prime(n):\n",
        "  return n>1 and all(n % i !=0 for i in range(2,\n",
        "  int(n**0.5)+1))\n",
        "  print(\"Sum of prime numbers:\",sum(i for i in L if is_prime(i)))\n",
        "\n",
        "#(xi)\n",
        "L.clear()\n",
        "print(\"After clearing L:\",L)\n",
        "\n",
        "#(xii)\n",
        "del L"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5bTZUhwBixD",
        "outputId": "3530625e-55af-4615-e7e2-afa184854e73"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After adding: [11, 12, 13, 14, 50, 60]\n",
            "After removing 11,13 [12, 14, 50, 60]\n",
            "Sorted ascending: [12, 14, 50, 60]\n",
            "Sorted descending,sorted [60, 50, 14, 12]\n",
            "is 13 in L False\n",
            "Length of L: 4\n",
            "Sum of L: 136\n",
            "Sum of odd numbers: 0\n",
            "Sum of even numbers: 136\n",
            "After clearing L: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q2.DICTIONARY OPERATION (i-vii)"
      ],
      "metadata": {
        "id": "JK9UW-HUCFXl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1:5.6,2:7.8,3:6.6,4:8.7,5:7.7}\n",
        "\n",
        "#(i)\n",
        "D[8]=8.8\n",
        "print(D)\n",
        "\n",
        "#(ii)\n",
        "D.pop(2,None)\n",
        "print(D)\n",
        "\n",
        "#(iii)\n",
        "print(\"is key 6 present?\",6 in D)\n",
        "\n",
        "\n",
        "#(iv)\n",
        "print(\"number of element:\",len(D))\n",
        "\n",
        "#(v)\n",
        "print(\"sum of values:\",sum(D.values()))\n",
        "\n",
        "#(vi)\n",
        "D[3]=7.1\n",
        "print(D)\n",
        "\n",
        "#(vii)\n",
        "D.clear()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YrAk6T0VCJcS",
        "outputId": "841e62a2-2601-4a6a-b141-6b598f4d177b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1: 5.6, 2: 7.8, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "{1: 5.6, 3: 6.6, 4: 8.7, 5: 7.7, 8: 8.8}\n",
            "is key 6 present? False\n",
            "number of element: 5\n",
            "sum of values: 37.4\n",
            "{1: 5.6, 3: 7.1, 4: 8.7, 5: 7.7, 8: 8.8}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q3. Set operations (i-vi)"
      ],
      "metadata": {
        "id": "44M9UeDHCO__"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s1={10,20,30,40,50,60}\n",
        "s2={40,50,60,70,80,90}\n",
        "\n",
        "#(i)\n",
        "s1.update([55,66])\n",
        "\n",
        "#(ii)\n",
        "s1.discard(10)\n",
        "s1.discard(30)\n",
        "\n",
        "#(iii)\n",
        "print(\"is 40 in s1?\", 40 in s1)\n",
        "\n",
        "#(iv)\n",
        "print(\"Union\",s1.union(s2))\n",
        "\n",
        "\n",
        "\n",
        "#(v)\n",
        "print(\"Intersection:\",s1.intersection(s2))\n",
        "\n",
        "#(vi)\n",
        "print(\"s1-s2:\",s1.difference(s2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rTDK__7fCSe3",
        "outputId": "b0d86f83-a8eb-4e2d-e498-e479c10fecc0"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "is 40 in s1? True\n",
            "Union {66, 70, 40, 80, 50, 20, 55, 90, 60}\n",
            "Intersection: {40, 50, 60}\n",
            "s1-s2: {66, 20, 55}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q4. write the following programs (i-iii)"
      ],
      "metadata": {
        "id": "wJfIUVXgCk90"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import string\n",
        "\n",
        "#(i)\n",
        "for _ in range (100):\n",
        "  print(\".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\")\n",
        "\n",
        "#(ii)\n",
        "for num in range (600,800):\n",
        "  if is_prime(num):\n",
        "    print (num)\n",
        "\n",
        "#(iii)\n",
        "for num in range(100,1001):\n",
        "  if num % 7 == 0 and num % 9 == 0:\n",
        "    print(num)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TU4E6A0PCmet",
        "outputId": "63fd6daf-6f38-4834-a99a-9318587c5493"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            ".join(random.choices(string.ascii_letters,k=random.randit(6,8)))\n",
            "601\n",
            "607\n",
            "613\n",
            "617\n",
            "619\n",
            "631\n",
            "641\n",
            "643\n",
            "647\n",
            "653\n",
            "659\n",
            "661\n",
            "673\n",
            "677\n",
            "683\n",
            "691\n",
            "701\n",
            "709\n",
            "719\n",
            "727\n",
            "733\n",
            "739\n",
            "743\n",
            "751\n",
            "757\n",
            "761\n",
            "769\n",
            "773\n",
            "787\n",
            "797\n",
            "126\n",
            "189\n",
            "252\n",
            "315\n",
            "378\n",
            "441\n",
            "504\n",
            "567\n",
            "630\n",
            "693\n",
            "756\n",
            "819\n",
            "882\n",
            "945\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q5.wap to create 2 list of 10 random numbers between 10 and 30 :find (i-v)"
      ],
      "metadata": {
        "id": "5eTTkXhWCsl3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list1 =[random.randint(10,30)for _ in range(10) ]\n",
        "list2 =[random.randint(10,30)for _ in range(10)]\n",
        "\n",
        "print(\"Common:\", set(list1) & set(list2))\n",
        "print(\"Uunique:\",set(list1)^ set(list2))\n",
        "print(\"Min1:\",min(list1),\"Min2\",min(list2))\n",
        "print(\"Max1:\",max(list1),\"Max2\",max(list2))\n",
        "print(\"Sum1:\",sum(list1),\"Sum2\",sum(list2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fut7Q9J6Cx3u",
        "outputId": "380ce432-3518-4adf-c29c-3cfea720a842"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Common: {17, 23}\n",
            "Uunique: {11, 14, 15, 16, 19, 20, 22, 24, 26, 28, 30}\n",
            "Min1: 11 Min2 17\n",
            "Max1: 28 Max2 30\n",
            "Sum1: 194 Sum2 215\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q6.wap to create list of 100 random numbers between 100 to 900.(i-iii)"
      ],
      "metadata": {
        "id": "5Mq58_mlC4yh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nums=[random.randint(100,900)for _ in range(100)]\n",
        "\n",
        "print(\"odd numbers:\",[n for n in nums if n % 2!=0])\n",
        "print(\"even numbers:\",[n for n in nums if n % 2 == 0])\n",
        "print(\"prime numbers:\",[n for n in nums if is_prime(n)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n0r15V_aC6nd",
        "outputId": "328f8df1-0d61-42c9-cd79-97e4b190543b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "odd numbers: [717, 669, 367, 317, 873, 293, 813, 743, 505, 379, 499, 643, 119, 621, 315, 801, 539, 253, 761, 645, 365, 271, 719, 827, 765, 323, 777, 897, 797, 425, 571, 819, 653, 747, 765, 451, 639, 267, 731, 319, 425, 139, 307, 799, 579, 307, 797, 765, 167, 669, 451, 219, 129, 611, 525, 141]\n",
            "even numbers: [374, 222, 260, 250, 486, 566, 622, 708, 550, 580, 800, 368, 492, 736, 480, 486, 876, 388, 376, 220, 272, 888, 620, 674, 252, 246, 560, 136, 118, 704, 450, 166, 526, 486, 392, 152, 358, 722, 546, 842, 308, 380, 506, 144]\n",
            "prime numbers: [367, 317, 293, 743, 379, 499, 643, 761, 271, 719, 827, 797, 571, 653, 139, 307, 307, 797, 167]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q7. write dictionary to file"
      ],
      "metadata": {
        "id": "WwPav7oiDA3E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "D = {1:\"one\",2:\"two\",3:\"three\",4:\"four\",5:\"five\"}\n",
        "with open(\"dict_output.txt\",\"w\")as f:\n",
        "  for k,v in D.items():\n",
        "    f.write(f\"{k}, {v}\\n\")"
      ],
      "metadata": {
        "id": "lF-ug-9pDB17"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q8. list word len to file"
      ],
      "metadata": {
        "id": "HpzrkMZzDLyj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "l=[\"one\",\"two\",\"three\",\"four\",\"five\"]\n",
        "with open(\"list_lengths.txt\",\"w\") as f:\n",
        "  for word in l:\n",
        "    f.write(f\"{word},{len(word)}\\n\")"
      ],
      "metadata": {
        "id": "JThsQ33RDNv-"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q9. 100 random strings to file"
      ],
      "metadata": {
        "id": "tRVaINCrDRPk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"random_strings.txt\",\"w\")as f:\n",
        "  for _ in range(100):\n",
        "    s = \".join(random.choices(string.ascii_letters, k=random.randint(10,15)))\"\n",
        "    f.write(s+'\\n')"
      ],
      "metadata": {
        "id": "7OfAdQXKDTIY"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q10. prime numbers to file"
      ],
      "metadata": {
        "id": "SIlMCoAODYe4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"prime_600_800.txt\",\"w\")as f:\n",
        "  for num in range(600,801):\n",
        "    if is_prime(num):\n",
        "      f.write(str(num)+'\\n')"
      ],
      "metadata": {
        "id": "-WXK2USBDbQN"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q11. time taken by program"
      ],
      "metadata": {
        "id": "MUzT1UOfDd_q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "start = time.time()\n",
        "sum(range(100000))\n",
        "end = time.time()\n",
        "print(\"Time taken:\",end - start)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hl2UHmXEDjnQ",
        "outputId": "edb4ee3b-1d77-44ff-e813-39843ac2b843"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Time taken: 0.002973794937133789\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q12. sort time graph"
      ],
      "metadata": {
        "id": "mkTM2aMzEsX2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.set()\n",
        "\n",
        "plt.bar([str(s) for s in sizes], time_taken,\n",
        "        color='skyblue')\n",
        "plt.xlabel(\"number of elements\")\n",
        "plt.ylabel(\"time (seconds)\")\n",
        "plt.title(\"time taken for sorting different list sizes\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CYIgwNmAEwzs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q13. student marks dictionary"
      ],
      "metadata": {
        "id": "KuaMKpG3Eh_R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "students = {\n",
        "    \"A\":[87,90,78,88,92],\n",
        "    \"B\":[70,65,80,75,68],\n",
        "    \"C\":[95,92,88,91,94],\n",
        "}\n",
        "average = {k:sum(v)/len(v) for k, v in\n",
        "students.items() }\n",
        "max_student= max(average,key=average.get)\n",
        "min_student= min(average,key=average.get)\n",
        "\n",
        "print(\"max Avg:\",max_student,\n",
        "average[max_student])\n",
        "print(\"min Avg:\",min_student,average[min_student])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eb1BBIE7Elj6",
        "outputId": "be81ba54-cf60-453d-8c6b-a323b2f1008e"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "max Avg: C 92.0\n",
            "min Avg: B 71.6\n"
          ]
        }
      ]
    }
  ]
}